# This is a comment to force a workflow re-run
name: Backend Tests

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.6-openjdk-18
      options: --mount type=volume,source=maven-repo,target=/root/.m2
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Print working directory before build
        run: pwd
      - name: List files in working directory before build
        run: ls -la

      - name: Build project
        run: mvn clean install -DskipTests
        working-directory: ./backend

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/springboot-ddd-category-1.0-SNAPSHOT.jar

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.6-openjdk-18
      options: --mount type=volume,source=maven-repo,target=/root/.m2
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run unit tests
        run: mvn clean test -Psmall-test
        working-directory: ./backend
      - name: Upload Surefire Report
        uses: actions/upload-artifact@v4
        with:
          name: surefire-report-small
          path: ./backend/target/small-test-reports/

  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.6-openjdk-18
      options: --mount type=volume,source=maven-repo,target=/root/.m2
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run integration tests
        run: mvn clean verify -Pmedium-test -DskipUnitTests=true
        working-directory: ./backend
      - name: Upload Surefire Report
        uses: actions/upload-artifact@v4
        with:
          name: surefire-report-medium
          path: ./backend/target/medium-test-reports/

  sonarqube:
    name: Build and analyze
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.6-openjdk-18
      options: --mount type=volume,source=maven-repo,target=/root/.m2
    needs: [unit-test, integration-test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 18
        uses: actions/setup-java@v4
        with:
          java-version: 18
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify -Pmedium-test org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=samdofreelancer_money-keeper
        working-directory: ./backend

  e2e-test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar

      # - name: Set up JDK 18
      #   uses: actions/setup-java@v4
      #   with:
      #     java-version: 18
      #     distribution: 'zulu'

      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 18

      # - name: Install frontend dependencies
      #   run: npm install
      #   working-directory: ./frontend

      # - name: Start frontend
      #   run: npm start &
      #   working-directory: ./frontend

      # - name: Start backend
      #   run: java -jar springboot-ddd-category-1.0-SNAPSHOT.jar &

      # - name: Wait for backend to start
      #   run: sleep 30 # wait for backend to be ready. A more robust solution would be to poll an endpoint.

      # - name: Install e2e dependencies
      #   run: npm install
      #   working-directory: ./e2e

      # - name: Run e2e tests
      #   run: npm run test:parallel
      #   working-directory: ./e2e

      # - name: Generate report
      #   run: npm run report
      #   working-directory: ./e2e

      # - name: Upload report for Github Pages
      #   uses: actions/upload-pages-artifact@v2
      #   with:
      #     path: e2e/reports

  # deploy-report:
  #   needs: e2e-test
  #   permissions:
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v2
